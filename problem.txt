TWO SUM PROBLEM


Generate Testcase Script (JS):

```
function generateScript() {
    // random function
    const randomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;
    
    // random length of array
    const length = randomInt(2, 10);

    // random value of array and target
    const numbers = Array.from({ length }, () => randomInt(-10, 10));
    const indices = [randomInt(0, length - 1), randomInt(0, length - 1)];
    const target = numbers[indices[0]] + numbers[indices[1]];

    // return testcase contain length, target, array
    // DONT FORGET TO ADD NEW LINE AT THE END OF TESTCASE
    return `${numbers.length}\n${target}\n${numbers.join(' ')}\n`;
}
```

Solution (C++):

```
// import all lib
#include <bits/stdc++.h>

// define function 
// (use function name in Init Code, the function name can not be changed)
std::vector<int> twoSum(const std::vector<int>& nums, int target) {
    std::unordered_map<int, int> numToIndex;
    
    for (int i = 0; i < nums.size(); ++i) {
        int complement = target - nums[i];
        if (numToIndex.find(complement) != numToIndex.end()) {
            return {numToIndex[complement], i};
        }
        numToIndex[nums[i]] = i;
    }
    
    return {};
}

// define main function
int main() {

    // open input.txt and output.txt
    // `input.txt` and `output.txt` are constant, do not change them
    // you should copy from here to begin of next comment
    std::ifstream iFile("input.txt");
    std::ofstream oFile("output.txt");
    
    if (!iFile) {
        std::cerr << "Failed to open input.txt" << std::endl;
        return 1;
    }
    if (!oFile) {
        std::cerr << "Failed to open output.txt" << std::endl;
        return 1;
    }

    // quantity: the number of testcase
    // line_per_testcase: the number of line in each testcase in input.txt
    int quantity, line_per_testcase;
    iFile >> quantity >> line_per_testcase; 
    
    // handle testcase base generateScript
    while (quantity--) {
        int n, target;
        iFile >> n >> target;

        std::vector<int> nums(n);
        for (int& num : nums) {
            iFile >> num;
        }

        std::vector<int> result = twoSum(nums, target);

        // write result to output.txt
        for (int index : result) {
            oFile << index << " ";
        }

        // new line at the end of output line
        oFile << std::endl; 
    }
    
    return 0;
}
```

Init Code (C++):

```
#include <bits/stdc++.h>

std::vector<int> twoSum(const std::vector<int>& nums, int target) {

    return {};
}
```
